{"version":3,"sources":["Components/BGMusic.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["BGMusic","autoPlay","loop","src","storeKey","App","useState","quotes","setQuotes","quote","setQuote","fetchedQuotes","setFetchedQuotes","getRandomQuote","Math","floor","random","length","useEffect","a","axios","get","then","response","data","store","set","catch","err","alert","window","location","reload","$","bind","e","preventDefault","on","fetchQuotes","css","innerWidth","innerHeight","Fragment","className","onClick","icon","faSync","randomId","Date","getTime","faImage","faMoon","href","text","faLanguage","onDoubleClick","size","faQuoteLeft","faQuoteRight","author","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3e0e5f79.chunk.js","sourcesContent":["import React from 'react';\n\nfunction BGMusic({}) {\n    return (\n        <div>\n            <audio autoPlay loop src=\"./musics/heroism.mp3\"></audio>\n        </div>\n    );\n}\n\nexport default BGMusic;","import React, { useEffect, useState } from \"react\";\nimport $ from \"jquery\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faQuoteRight,\n  faQuoteLeft,\n  faSync,\n  faImage,\n  faMoon,\n  faLanguage,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport store from \"store\";\nimport \"./App.css\";\n\nimport BGMusic from \"./Components/BGMusic\";\n\nconst storeKey = \"quotes-store-key\";\n\nfunction App() {\n  const [quotes, setQuotes] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [quoteML, setQuoteML] = useState(\"\");\n  const [fetchedQuotes, setFetchedQuotes] = useState(false);\n\n  var translateToMl = async () => {};\n\n  var getRandomQuote = () => {\n    let quote = quotes[Math.floor(Math.random() * quotes.length)];\n    setQuote(quote);\n  };\n\n  var changeBgImage = () => {\n    const randomId = new Date().getTime();\n    $(\".background-image\").css(\n      \"background-image\",\n      `url('https://picsum.photos/${window.innerWidth}/${window.innerHeight}?random=${randomId}')`\n    );\n  };\n\n  var removeBgImage = () => {\n    $(\".background-image\").css(\"background-image\", \"none\");\n  };\n\n  useEffect(() => {\n    // Jquery\n    //Disable cut copy paste\n    $(\"*\").bind(\"cut copy paste\", function (e) {\n      e.preventDefault();\n    });\n\n    //Disable mouse right click\n    $(\"*\").on(\"contextmenu\", function (e) {\n      return false;\n    });\n\n    async function fetchQuotes() {\n      await axios\n        .get(\"https://type.fit/api/quotes/\")\n        .then((response) => {\n          setQuotes(response.data);\n          store.set(storeKey, response.data);\n          setFetchedQuotes(true);\n        })\n        .catch((err) => {\n          alert(err);\n          window.location.reload();\n        });\n    }\n    if (typeof store.get(storeKey) !== \"undefined\") {\n      setQuotes(store.get(storeKey));\n      setFetchedQuotes(true);\n      getRandomQuote();\n    } else {\n      fetchQuotes();\n      getRandomQuote();\n    }\n    $(\".background-image\").css(\n      \"background-image\",\n      `url('https://picsum.photos/${window.innerWidth}/${window.innerHeight}')`\n    );\n  }, [fetchedQuotes]);\n\n  return (\n    <React.Fragment>\n      <BGMusic />\n      <button\n        className=\"change-bg top-right\"\n        onClick={() => {\n          getRandomQuote();\n        }}\n      >\n        <FontAwesomeIcon icon={faSync} />\n      </button>\n      <button className=\"change-bg top-left\" onClick={changeBgImage}>\n        <FontAwesomeIcon icon={faImage} />\n      </button>\n      <button className=\"change-bg bottom-left\" onClick={removeBgImage}>\n        <FontAwesomeIcon icon={faMoon} />\n      </button>\n      <button\n        className=\"change-bg bottom-right\"\n        onClick={() => {\n          window.location.href = `https://translate.google.co.in/?sl=en&tl=ml&text=${quote.text}&op=translate`;\n        }}\n      >\n        <FontAwesomeIcon icon={faLanguage} />\n      </button>\n      <div\n        className=\"full-width top-fixed background-image\"\n        onDoubleClick={getRandomQuote}\n      >\n        <div className=\"content\">\n          <h1 className=\"text\">\n            <FontAwesomeIcon\n              className=\"quotes-left\"\n              size=\"1x\"\n              icon={faQuoteLeft}\n            />\n            {quote ? quote.text : \" \"}\n            <FontAwesomeIcon\n              className=\"quotes-right\"\n              size=\"1x\"\n              icon={faQuoteRight}\n            />\n            <br />\n            <br />\n            <span className=\"author\">\n              {\" \"}\n              {quote ? `  - ${quote.author}` : \" \"}\n            </span>\n          </h1>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}